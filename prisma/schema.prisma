generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["strictUndefinedChecks"]
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}


enum Role {
  ADMIN
  USER
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  password  String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())

  funeralParlor FuneralParlor?

  Bookings Booking[]
}


model FuneralParlor {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  description  String?
  contact   String?
  location  String?
  createdAt DateTime @default(now())

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  services Service[]
  assets   Asset[]

}

model Service {
  id       Int      @id @default(autoincrement())
  
  name     String   @unique
  description  String?
  rate    Float?
  availability Boolean? @default(false)
  createdAt DateTime @default(now())
  
  funeralParlorId Int
  funeralParlor FuneralParlor @relation(fields: [funeralParlorId], references: [id])
  
}

model Booking {
  id       Int      @id @default(autoincrement())

  price    Float
  createdAt DateTime @default(now())
  
  userId   Int
  user    User     @relation(fields: [userId], references: [id])

  serviceId Int?
  bookedDate DateTime?

  assertId  Int
  assetQty Int

  status   BookingStatus @default(PENDING)
  type     bookingType
  name    String

  parlorId Int
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum bookingType {
  SERVICE
  ASSET
}

model Asset {
  id       Int      @id @default(autoincrement())
  
  name     String   @unique
  description  String?
  rate    Float?
  quantity Int?
  createdAt DateTime @default(now())
  
  funeralParlorId Int
  funeralParlor FuneralParlor @relation(fields: [funeralParlorId], references: [id])

}
